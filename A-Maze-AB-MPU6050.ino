/* A-Maze
 by Alojz Jakob <http://jakobdesign.com>

 ********** TAMAGUINO ***********
 * Maze game for Arduino *
 ********************************
 
*/

//#include <SPI.h>
#include <Wire.h>
//#include <Adafruit_GFX.h>
//#include <Adafruit_SSD1306.h>
#include <Arduboy2.h>
#include <ArduboyPlaytune.h>
// make an instance of arduboy used for many functions
Arduboy2 arduboy;
//MPU
const int MPU=0x68;  // I2C address of the MPU-6050
int16_t AcX,AcY;//,AcZ,Tmp,GyX,GyY,GyZ;
//Display

//#define OLED_DC     4
//#define OLED_CS     12
//#define OLED_RESET  6
//Adafruit_SSD1306 display(OLED_DC, OLED_RESET, OLED_CS);
ArduboyPlaytune tunes(arduboy.audio.enabled);


 // 'title', 128x64px
const unsigned char title1 [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0x40, 0x40, 0x40, 0x60, 0x20, 0xa0, 0x20, 0xa0, 0x20, 0x20, 0x60, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x20, 0xd0, 0x68, 0xf4, 0x5a, 0xbe, 0xd5, 0xad, 0x95, 0xa9, 0x94, 0x29, 0x01, 0x29, 0x03, 0xa2, 0x04, 0x48, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0x0c, 0xb6, 0x5a, 0xaf, 0x52, 0xa6, 0x4c, 0x18, 0x30, 0x20, 0x20, 0x10, 0x68, 0xb4, 0x5a, 0xad, 0x56, 0x2a, 0x40, 0x00, 0x01, 0xff, 0x00, 0x00, 0x80, 0x40, 0x20, 0xa0, 0x20, 0xb0, 0x10, 0x10, 0x10, 0x1f, 0x38, 0x22, 0x67, 0xa3, 0x25, 0x22, 0x25, 0x22, 0x25, 0x20, 0x22, 0xa0, 0x61, 0x04, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x11, 0x0d, 0x86, 0x60, 0x58, 0xac, 0x5a, 0xaf, 0x52, 0x05, 0x4a, 0x00, 0x89, 0x80, 0x82, 0x80, 0x81, 0x80, 0xc0, 0x40, 0x40, 0x20, 0x11, 0x0e, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7c, 0x03, 0x24, 0x01, 0x0b, 0x41, 0x00, 0x3f, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0xce, 0x78, 0x00, 0x40, 0x00, 0x00, 0x00, 0xe0, 0x31, 0xdf, 0xd0, 0x50, 0x90, 0x50, 0x90, 0x50, 0x10, 0x50, 0x10, 0x90, 0x1c, 0x37, 0xe0, 0x02, 0x00, 0x01, 0x02, 0x01, 0x0a, 0x00, 0x29, 0x00, 0x00, 0x80, 0xc0, 0x60, 0xa0, 0x62, 0xc0, 0x08, 0x81, 0x60, 0x30, 0x88, 0x27, 0x52, 0x0d, 0xf6, 0x1b, 0x09, 0x0c, 0x05, 0x04, 0x0c, 0x19, 0xd0, 0x70, 0x00, 0x00, 0x00, 0x80, 0x43, 0xa6, 0x58, 0xa8, 0x54, 0x3a, 0x15, 0x00, 0x00, 0x00, 0xe0, 0x38, 0x06, 0x03, 0x80, 0x60, 0x18, 0x06, 0x01, 0x02, 0x01, 0x12, 0x40, 0x08, 0x01, 0x00, 0x00, 0x00, 0x13, 0x04, 0x14, 0x04, 0x04, 0x04, 0x8c, 0xfc, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x82, 0x82, 0xc2, 0xc2, 0x8a, 0x81, 0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x05, 0xfc, 0x05, 0x04, 0x05, 0x04, 0x05, 0x04, 0x85, 0xfc, 0x04, 0x06, 0x03, 0x01, 0x00, 0x80, 0x60, 0x18, 0x07, 0x03, 0x02, 0x06, 0x04, 0x02, 0x01, 0x00, 0x00, 0xc0, 0x3f, 0x0d, 0x03, 0x00, 0x00, 0x00, 0x02, 0x80, 0x41, 0x20, 0x23, 0x66, 0x44, 0x88, 0x98, 0x10, 0x08, 0x27, 0x01, 0x08, 0x00, 0x3e, 0x63, 0xc0, 0x82, 0x08, 0x01, 0x04, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 0x04, 0x08, 0x08, 0x1f, 0x10, 0x10, 0x10, 0x10, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x5f, 0x11, 0x31, 0x21, 0x21, 0x21, 0x61, 0xc1, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x0c, 0x18, 0x10, 0x30, 0x20, 0x30, 0x10, 0x18, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x06, 0x1c, 0x30, 0x20, 0x20, 0x20, 0x10, 0x18, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x10, 0x20, 0x20, 0x20, 0x18, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x46, 0x41, 0x40, 0x40, 0x20, 0x50, 0x48, 0x44, 0x32, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x08, 0x18, 0x30, 0x20, 0x20, 0x20, 0x21, 0x31, 0x12, 0x0c, 0x08, 0x08, 0x08, 0x18, 0x10, 0x10, 0x10, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x10, 0x0f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x06, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x94, 0x94, 0x68, 0x00, 0x1c, 0x3c, 0xf0, 0x20, 0x1c, 0x00, 0x00, 0x00, 0xf8, 0xfc, 0x24, 0x24, 0xf8, 0x00, 0xfc, 0xfc, 0x80, 0x80, 0x00, 0x78, 0xfc, 0x84, 0x84, 0x78, 0x00, 0x60, 0xe0, 0x80, 0x80, 0x7c, 0x00, 0xc4, 0xe4, 0xb4, 0x9c, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
 // 'title2', 128x64px
const unsigned char title2 [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x40, 0x00, 0x40, 0x20, 0x00, 0xa0, 0x00, 0xa0, 0x00, 0x20, 0x40, 0x00, 0x40, 0x00, 0x40, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x40, 0xa0, 0x50, 0xaa, 0x55, 0xa8, 0x15, 0xa8, 0x14, 0x28, 0x01, 0x28, 0x01, 0xa2, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x04, 0xa2, 0x50, 0xaa, 0x50, 0xa2, 0x44, 0x08, 0x10, 0x20, 0x00, 0x00, 0x40, 0xa0, 0x50, 0xa8, 0x54, 0x2a, 0x40, 0x00, 0x01, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0xa0, 0x10, 0x00, 0x10, 0x0a, 0x10, 0x22, 0x45, 0xa2, 0x05, 0x22, 0x05, 0x22, 0x05, 0x20, 0x00, 0xa0, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x11, 0x08, 0x04, 0x20, 0x50, 0xa8, 0x50, 0xaa, 0x50, 0x00, 0x40, 0x00, 0x01, 0x80, 0x00, 0x80, 0x01, 0x80, 0x40, 0x00, 0x40, 0x20, 0x11, 0x0a, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x01, 0x20, 0x01, 0x0a, 0x41, 0x00, 0x15, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x8a, 0x50, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x20, 0x55, 0x80, 0x50, 0x80, 0x50, 0x80, 0x50, 0x00, 0x50, 0x00, 0x10, 0x08, 0x15, 0xa0, 0x00, 0x00, 0x01, 0x02, 0x01, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x80, 0x40, 0xa0, 0x40, 0x80, 0x00, 0x80, 0x40, 0x20, 0x00, 0x22, 0x50, 0x08, 0x54, 0x0a, 0x01, 0x08, 0x05, 0x00, 0x04, 0x08, 0x50, 0x20, 0x00, 0x00, 0x00, 0x80, 0x41, 0xa2, 0x50, 0xa8, 0x54, 0x2a, 0x15, 0x00, 0x00, 0x00, 0x40, 0x28, 0x04, 0x02, 0x00, 0x20, 0x10, 0x02, 0x01, 0x02, 0x01, 0x02, 0x40, 0x08, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x14, 0x00, 0x04, 0x00, 0x04, 0xa8, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x82, 0x00, 0x82, 0x40, 0x8a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x05, 0xa8, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0xa8, 0x04, 0x02, 0x01, 0x00, 0x00, 0x80, 0x40, 0x08, 0x05, 0x02, 0x00, 0x02, 0x04, 0x02, 0x01, 0x00, 0x00, 0x80, 0x15, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x20, 0x01, 0x22, 0x44, 0x88, 0x10, 0x00, 0x00, 0x22, 0x01, 0x08, 0x00, 0x2a, 0x41, 0x80, 0x00, 0x08, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x08, 0x15, 0x00, 0x10, 0x00, 0x10, 0x20, 0x40, 0x00, 0x00, 0x00, 0x55, 0x00, 0x11, 0x20, 0x01, 0x20, 0x41, 0x80, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x08, 0x10, 0x20, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x20, 0x00, 0x08, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x41, 0x00, 0x40, 0x20, 0x50, 0x08, 0x44, 0x22, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x00, 0x08, 0x10, 0x20, 0x00, 0x20, 0x01, 0x20, 0x10, 0x08, 0x00, 0x08, 0x00, 0x08, 0x10, 0x00, 0x10, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00, 0x05, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x54, 0x80, 0x14, 0x28, 0x00, 0x08, 0x14, 0xa0, 0x00, 0x08, 0x00, 0x00, 0x00, 0xa8, 0x54, 0x20, 0x04, 0xa8, 0x00, 0xa8, 0x54, 0x80, 0x00, 0x00, 0x50, 0xa8, 0x04, 0x80, 0x50, 0x00, 0x40, 0xa0, 0x00, 0x80, 0x54, 0x00, 0x44, 0xa0, 0x14, 0x88, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

 // 'title3', 128x64px
const unsigned char title3 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0xa0, 0x50, 0xaa, 0x54, 0xa8, 0x15, 0xa8, 0x14, 0x28, 0x01, 0x28, 0x01, 0xa0, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0xa2, 0x50, 0xa8, 0x50, 0xa2, 0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x40, 0xa0, 0x50, 0xa8, 0x54, 0x2a, 0x40, 0x00, 0x01, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0xa0, 0x10, 0x00, 0x10, 0x08, 0x10, 0x22, 0x45, 0x82, 0x05, 0x22, 0x05, 0x02, 0x05, 0x20, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x20, 0x50, 0xa8, 0x50, 0xaa, 0x50, 0x00, 0x40, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x01, 0x0a, 0x41, 0x00, 0x15, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x8a, 0x50, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x51, 0x80, 0x40, 0x80, 0x50, 0x80, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x01, 0x02, 0x01, 0x0a, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x50, 0x08, 0x14, 0x0a, 0x01, 0x08, 0x05, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa2, 0x40, 0xa0, 0x50, 0x2a, 0x14, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x00, 0x20, 0x10, 0x02, 0x01, 0x02, 0x01, 0x02, 0x40, 0x08, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x02, 0x40, 0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x20, 0x05, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x88, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x01, 0x20, 0x00, 0x00, 0x10, 0x00, 0x00, 0x22, 0x01, 0x08, 0x00, 0x22, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x08, 0x05, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x10, 0x00, 0x00, 0x20, 0x01, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x20, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x08, 0x00, 0x20, 0x00, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0x20, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x54, 0x80, 0x14, 0x28, 0x00, 0x08, 0x14, 0xa0, 0x00, 0x08, 0x00, 0x00, 0x00, 0xa8, 0x54, 0x20, 0x04, 0xa8, 0x00, 0xa8, 0x54, 0x80, 0x00, 0x00, 0x50, 0xa8, 0x04, 0x80, 0x50, 0x00, 0x40, 0xa0, 0x00, 0x80, 0x54, 0x00, 0x44, 0xa0, 0x14, 0x88, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

 // 'title4', 128x64px
const unsigned char title4 [] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x80, 0x01, 0x80, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x20, 0x10, 0x00, 0x10, 0x08, 0x10, 0x22, 0x40, 0x80, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x20, 0x10, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x14, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x0a, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x11, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa2, 0x40, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x00, 0x20, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00, 0x40, 0x08, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x40, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x88, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x01, 0x20, 0x00, 0x00, 0x10, 0x00, 0x00, 0x22, 0x01, 0x08, 0x00, 0x22, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x08, 0x05, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x10, 0x00, 0x00, 0x20, 0x01, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x20, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x08, 0x00, 0x20, 0x00, 0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0x20, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x80, 0x10, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00, 0x08, 0x00, 0x00, 0x00, 0x88, 0x00, 0x20, 0x00, 0x88, 0x00, 0x20, 0x04, 0x80, 0x00, 0x00, 0x10, 0x80, 0x04, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x80, 0x14, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const unsigned char brick [] PROGMEM = {
  // 'brick, 4x4px
  0x0f, 0x0d, 0x09, 0x0f,
};

const unsigned char checker [] PROGMEM = {
  // 'checker, 4x4px
  0x0a, 0x05, 0x0a, 0x05, 
};


/*const int button1Pin = A2; //LEFT
const int button2Pin = A1; //RIGHT
const int button3Pin = A0; //UP
const int button4Pin = A3; //DOWN
const int button5Pin = 7; //A
const int button6Pin = 0; //B
const int button7Pin = 8; //MENU

const int sound = 5; 

int button1State = 0;
int button2State = 0;
int button3State = 0;
int button4State = 0;
int button5State = 0;
int button6State = 0;
int button7State = 0;


#define ACTIVATED LOW
*/
#define DELAYMULTIPLIER  0

#define MAZEHEIGHT  32
#define MAZEWIDTH  15

uint16_t  Maze[] = {
  0b1101111111111111,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1100000000000001,
  0b1101010101010101,
  0b1111111111111101,
  0b0000000000000000
};

uint8_t geni, genj, genk, genval, genmod;
int8_t  genx, geny;


int posx=0, posy=2; // Where you are in the Maze

int illuminatedRow=0;
int blinkPlayer=1;
int wallPhase=1;

int level=1;





void setup() {
  arduboy.begin();
  Serial.begin(9600);
  arduboy.initRandomSeed();
  /*pinMode(button1Pin, INPUT);
  pinMode(button2Pin, INPUT);
  pinMode(button3Pin, INPUT);
  pinMode(button4Pin, INPUT);
  pinMode(button5Pin, INPUT);
  pinMode(button6Pin, INPUT);
  pinMode(button7Pin, INPUT);

  digitalWrite(button1Pin, HIGH);
  digitalWrite(button2Pin, HIGH);
  digitalWrite(button3Pin, HIGH);
  digitalWrite(button4Pin, HIGH);
  digitalWrite(button5Pin, HIGH);
  digitalWrite(button6Pin, HIGH);
  digitalWrite(button7Pin, HIGH);
  // or just 
  // pinMode(button1Pin, INPUT_PULLUP)
  // etc
  
 // pinModetunes( OUTPUT);

  //pinMode(13,OUTPUT);
  */
// audio setup
  tunes.initChannel(PIN_SPEAKER_1);
#ifndef AB_DEVKIT
  // if not a DevKit
  tunes.initChannel(PIN_SPEAKER_2);
#else
  // if it's a DevKit
  tunes.initChannel(PIN_SPEAKER_1); // use the same pin for both channels
  tunes.toneMutesScore(true);       // mute the score when a tone is sounding
#endif
  //randomSeed(analogRead(A5));
  delay(random(2,2000));
//  arduboy.begin(SSD1306_SWITCHCAPVCC);
  arduboy.clear();
    // Initialize MPU
  Wire.beginTransmission(MPU);
  Wire.write(0x6B);  // PWR_MGMT_1 register
  Wire.write(0);     // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);

  // splash
  ////arduboy.setTextColor(WHITE);
  //arduboy.println(F("jakobdesign presents")); 
  //arduboy.print(F(" generating maze...")); 
  arduboy.drawBitmap(0, 0, title4 , 128, 64, WHITE);
  arduboy.display();
  tunes.tone(1500,5);
  delay(100);
  arduboy.clear();
  arduboy.drawBitmap(0, 0, title3 , 128, 64, WHITE);
  arduboy.display();
  tunes.tone(1500,5);
  delay(100);
  arduboy.clear();
  arduboy.drawBitmap(0, 0, title2 , 128, 64, WHITE);
  arduboy.display();
  tunes.tone(1500,5);
  delay(100);
  arduboy.clear();
  arduboy.drawBitmap(0, 0, title1 , 128, 64, WHITE);
  arduboy.display();
  tunes.tone(1500,5);
  delay(3000);
  arduboy.clear();
  arduboy.drawBitmap(0, 0, title2 , 128, 64, WHITE);
  arduboy.display();
  tunes.tone(1500,5);
  delay(100);
  arduboy.clear();
  arduboy.drawBitmap(0, 0, title3 , 128, 64, WHITE);
  arduboy.display();
  tunes.tone(1500,5);
  delay(100);
  arduboy.clear();
  arduboy.drawBitmap(0, 0, title4 , 128, 64, WHITE);
  arduboy.display();
  tunes.tone(1500,5);
  delay(100);
    // limits the frames per second
  arduboy.setFrameRate(60);
  arduboy.clear();
  //arduboy.drawBitmap(15, 24, splash1 , 48, 26, WHITE);
  //arduboy.drawBitmap(48, 24, splash2 , 80, 40, WHITE);
  
  
  //splash tone

  //delay(200);
  //tunes.tone(1000,200);
  //delay(400);
  //tunes.tone(700,200);
  //delay(200);
  //tunes.tone(1100,200);

  
  // end splash


  generateMaze();


  //delay(2000);

  //for(int i=0;i<MAZEHEIGHT;i++){
  //  Serial.println(Maze[i],BIN);
  //}
  
  //drawMazeSerial();
  
  
  arduboy.clear();
  
}



void loop() {
  
  /*button1State = digitalRead(button1Pin);
  button2State = digitalRead(button2Pin);
  button3State = digitalRead(button3Pin);
  button4State = digitalRead(button4Pin);
  button5State = digitalRead(button5Pin);
  button6State = digitalRead(button6Pin);
  button7State = digitalRead(button7Pin);
*/

  Wire.beginTransmission(MPU);
  Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(true);
  Wire.requestFrom(MPU,14,true);  // request a total of 14 registers
  AcX=Wire.read()<<8|Wire.read();  // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)    
  AcY=Wire.read()<<8|Wire.read();  // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
//  AcZ=Wire.read()<<8|Wire.read();  // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
//  Tmp=Wire.read()<<8|Wire.read();  // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
//  GyX=Wire.read()<<8|Wire.read();  // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
//  GyY=Wire.read()<<8|Wire.read();  // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
//  GyZ=Wire.read()<<8|Wire.read();  // 0x47 (GYRO_ZOUT_H) & 0x48 (GYRO_ZOUT_L)
  arduboy.pollButtons();
  arduboy.clear();

 
  /* ------- BUTTON PRESS ACTIONS ------- */
  bool wall;
  
  
  /* ------- BUTTON 1 - LEFT ------- */
  if(AcY > 300){
    //generateMaze();
    if(posx-1>=0){
      wall=readPixel(posx-1,posy);
      if(!wall){
        --posx;
        tunes.tone(1600,5);
      }else{
        tunes.tone(100,50);  
      }
    }else{
      tunes.tone(100,50);
    }
    delay(20);
  }
  /* ------- BUTTON 2 - RIGHT ------- */
  if(AcY < -300){
    if(posx+1<=MAZEHEIGHT){
      wall=readPixel(posx+1,posy);
      if(!wall){
        ++posx;
        tunes.tone(1600,5);
      }else{
        tunes.tone(100,50);  
      }
    }else{
      tunes.tone(100,50);
    }
    delay(20);
  }
  /* ------- BUTTON 3 - UP ------- */
  if(AcX < 300){
    if(posy-1>=2){
      wall=readPixel(posx,posy-1);
      if(!wall){
        --posy;
        tunes.tone(1600,5);
      }else{
        tunes.tone(100,50);  
      }
    }else{
      tunes.tone(100,50);
    }
    delay(20);
  }
  /* ------- BUTTON 4 - DOWN ------- */
  if(AcX > 300){
    if(posy+1<=MAZEWIDTH){
      wall=readPixel(posx,posy+1);
      if(!wall){
        ++posy;
        tunes.tone(1600,5);
      }else{
        tunes.tone(100,50);  
      }
    }else{
      tunes.tone(100,50);
    }
    delay(20);
  }

  if(arduboy.pressed(A_BUTTON)){
    arduboy.fillCircle(20,30,5,WHITE);
  }
  if(arduboy.pressed(B_BUTTON)){
    arduboy.fillCircle(50,30,5,WHITE);
  }
  if(arduboy.pressed(A_BUTTON |B_BUTTON)){
    arduboy.fillCircle(80,30,5,WHITE);
  }

  
  arduboy.setCursor(0,0);

  if(posx==MAZEHEIGHT){
    posx=0;
    posy=2;
    displayLevelSplash();
    level++;
    illuminatedRow=0;
    blinkPlayer=1;
    wallPhase=1;
  }else{
    drawMaze();
  }
  
  
  arduboy.display();

  delay(10*DELAYMULTIPLIER);

}



void displayLevelSplash(){
  int levely=-8,levelnoy=-8,completey=-8, i, j;
  
  ////arduboy.setTextColor(WHITE);
  for(i=0;i<3;i++){
    for(j=0;j<50;j+=2){
      arduboy.clear();
      if(levely<20){
        levely+=2;
        tunes.tone(levely*65,5);
      }
      if(levely==20 and levelnoy<30){
        levelnoy+=2;
        tunes.tone(levelnoy*65,5);
      }
      if(levely==20 and levelnoy==30 and completey<40){
        completey+=2;
        tunes.tone(completey*65,5);
      }
      arduboy.setCursor(15,levely);
      arduboy.setTextBackground(BLACK);
      arduboy.setTextColor(WHITE);
      arduboy.print("LEVEL");
      arduboy.setCursor(45,levelnoy);
      arduboy.print(level);
      arduboy.setCursor(55,completey);
      arduboy.print("COMPLETE!");
      arduboy.display();
    }
  }
  
  delay(1000);
  
  levely=-8;
  levelnoy=-8;
  for(i=0;i<2;i++){
    for(j=0;j<50;j+=2){
      arduboy.clear();
      if(levely<20){
        levely+=2;
        tunes.tone(levely*65,5);
      }
      if(levely==20 and levelnoy<30){
        levelnoy+=2;
        tunes.tone(levelnoy*65,5);
      }
      arduboy.setCursor(15,levely);
      arduboy.print("LEVEL");
      arduboy.setCursor(45,levelnoy);
      arduboy.print(level+1);
      arduboy.display();
    }
  }
  
  delay(1500);
  
  generateMaze();
}

void drawMazeSerial(){
  uint8_t i, j;
  bool dot;
  for(i=0;i<=MAZEHEIGHT;i++){
    for(j=0;j<=MAZEWIDTH;j++){
      dot=readPixel(i,j);
      if(dot){
        Serial.print("*");
      }else{
        Serial.print(" ");
      }
    }
    Serial.println();
  }  
}


void drawMaze(){
  uint8_t i, j;
  bool wall;
  
  for(i=0;i<=MAZEHEIGHT;i++){
    for(j=0;j<=MAZEWIDTH;j++){
      wall=readPixel(i,j);
      if(wall){

        //walls
        
        if(wallPhase==1){
          if(illuminatedRow>=i){
            arduboy.drawPixel(i*4,j*4,WHITE);
            arduboy.drawPixel(i*4,j*4+2,WHITE);
            arduboy.drawPixel(i*4+1,j*4+1,WHITE);
            arduboy.drawPixel(i*4+1,j*4+3,WHITE);
            arduboy.drawPixel(i*4+2,j*4+2,WHITE);
            arduboy.drawPixel(i*4+2,j*4+4,WHITE);
            arduboy.drawPixel(i*4+3,j*4+1,WHITE);
            arduboy.drawPixel(i*4+3,j*4+3,WHITE);
          }else{
            arduboy.drawPixel(i*4+2,j*4+2,WHITE);
          }
        }else if(wallPhase==2){
          if(illuminatedRow>=i){
            arduboy.fillRect(i*4,j*4,4,4,WHITE);
          }else{
            //arduboy.drawRect(i*4,j*4,4,4,WHITE);
            arduboy.drawPixel(i*4,j*4,WHITE);
            arduboy.drawPixel(i*4,j*4+2,WHITE);
            arduboy.drawPixel(i*4+1,j*4+1,WHITE);
            arduboy.drawPixel(i*4+1,j*4+3,WHITE);
            arduboy.drawPixel(i*4+2,j*4+2,WHITE);
            arduboy.drawPixel(i*4+2,j*4+4,WHITE);
            arduboy.drawPixel(i*4+3,j*4+1,WHITE);
            arduboy.drawPixel(i*4+3,j*4+3,WHITE);
          }
        }else if(wallPhase==3){
          arduboy.fillRect(i*4,j*4,4,4,WHITE);
        }
        //arduboy.drawBitmap(i*4, j*4, brick , 4, 4, WHITE);

        if(wallPhase==3 and (i==posx or j==posy) and j!=0){
          //draw crosshair
          arduboy.drawPixel(i*4+2,j*4+2,BLACK);
        }
        
      }else{

        //not walls
        
        if(wallPhase==3 and (i==posx or j==posy) and j!=0){
          //draw crosshair
          arduboy.drawPixel(i*4+2,j*4+2,WHITE);
        }
        //arduboy.drawBitmap(i*4, j*4, checker , 4, 4, WHITE);
        /*arduboy.drawPixel(i*4,j*4,WHITE);
        arduboy.drawPixel(i*4,j*4+2,WHITE);
        arduboy.drawPixel(i*4+1,j*4+1,WHITE);
        arduboy.drawPixel(i*4+1,j*4+3,WHITE);
        arduboy.drawPixel(i*4+2,j*4+2,WHITE);
        arduboy.drawPixel(i*4+2,j*4+4,WHITE);
        arduboy.drawPixel(i*4+3,j*4+1,WHITE);
        arduboy.drawPixel(i*4+3,j*4+3,WHITE);
        */
      }
    }
  }  


    //display level
  //arduboy.fillRect(0,0,128,8,WHITE);
  if(wallPhase>1){
    arduboy.setTextBackground(WHITE);
    arduboy.setTextColor(BLACK);
    arduboy.setCursor(0,0);
    arduboy.print("level: ");
    arduboy.print(level);
  }


  //draw player
  /*
  arduboy.drawPixel(posx*4,posy*4+1,WHITE);
  arduboy.drawPixel(posx*4,posy*4+2,WHITE);
  
  arduboy.drawPixel(posx*4+1,posy*4,WHITE);
  arduboy.drawPixel(posx*4+2,posy*4,WHITE);
  
  arduboy.drawPixel(posx*4+3,posy*4+1,WHITE);
  arduboy.drawPixel(posx*4+3,posy*4+2,WHITE);
  
  arduboy.drawPixel(posx*4+1,posy*4+3,WHITE);
  arduboy.drawPixel(posx*4+2,posy*4+3,WHITE);
  */
  if(blinkPlayer==1){
    arduboy.fillCircle(posx*4+1,posy*4+1,3,WHITE);
    arduboy.fillCircle(posx*4+1,posy*4+1,1,BLACK);
  }else{
    arduboy.fillCircle(posx*4+1,posy*4+1,3,BLACK);
    arduboy.fillCircle(posx*4+1,posy*4+1,1,WHITE);
  }
  /*
  if(blinkPlayer==1){
    arduboy.drawPixel(posx*4+1,posy*4+1,WHITE);
  }
  if(blinkPlayer==2){
    arduboy.drawPixel(posx*4+2,posy*4+1,WHITE);
  }
  if(blinkPlayer==3){
    arduboy.drawPixel(posx*4+1,posy*4+2,WHITE);
  }
  if(blinkPlayer==4){
    arduboy.drawPixel(posx*4+2,posy*4+2,WHITE);
  }
  */
  blinkPlayer++;
  if(blinkPlayer>16){
    blinkPlayer=1;
  }
  
  if(illuminatedRow<MAZEHEIGHT+1){
    illuminatedRow++;
  }else{
    if(wallPhase<3){
      wallPhase++;
      if(wallPhase==2){
        illuminatedRow=0;
      }
    }
  }

  

}

bool readPixel(uint8_t i, uint8_t j){
  uint16_t Data = Maze[i];
  byte Hi = (Data & 0xFF00)>>8;
  byte Lo = Data & 0x00FF;  
  if(j>7){
    return bitRead(Lo, 7 - (j % 8));
  }else{
    //j=j-8;
    return bitRead(Hi, 7 - (j % 8));
  }
}





void generateMaze(){
  bool alternate=false;
  for (geni = 1; geni < MAZEHEIGHT-1; geni++) {
    if(!alternate){
      Maze[geni] = 0b1100000000000001;
    }else{
      Maze[geni] = 0b1101010101010101;
    }
    alternate=!alternate;
  }
  genmod = 4;
  for (geni = 2; geni < MAZEHEIGHT - 2; geni += 2) {
    for (genj = 3; genj < MAZEWIDTH - 1; genj += 2) {
      Maze[geni] |= (0x8000 >> genj);
      do{
        //Roll a stick
        random();
        //genval = (uint8_t)(analogRead(A0) & 0x00FF) % genmod;
        genval = (uint8_t)(random(10000) & 0x00FF) % genmod;
        //val = analogRead(A0) % mod;
        genx = 0, geny = 0;
        if (genval == 0)geny = 1;
        if (genval == 1)genx = -1;
        if (genval == 2)genx = 1;
        if (genval == 3)geny = -1;
      }while ((Maze[geni + geny] & (0x8000 >> (genj + genx)))); 
      Maze[geni + geny] |= (0x8000 >> (genj + genx));
    }
    genmod = 3;
  }
}
